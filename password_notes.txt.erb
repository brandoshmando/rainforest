Associations:

  belongs_to
  - always has foreign key and is the ONLY association that needs that. The foreign key is always the id of the parent.

  has_many_and_belongs_to
  - uses a join table ("useless" model) and matches each parents id to each other; Join table does not have any other attributes there by making it a "useless" model.
  -Join table must be named in alphabetical order i.e. accounts_parts

  has_many :through
  -defines a many to many association between two models through another model
  requires a join table that is a model (not useless), meaninf that the join table in this case has actual attributes.

Authentication:
  - Username/password

Passwords:
  - should not be stored in plain text but rather hashed (Algorithm that transforms password in one direction so that it cannot be reverse de-crypted)
  -On top of this, add extra bit of info that only the server knows (generally stored in a file on the server someplace). Also known as "Salt" . Added to the plain text password and then hashed.

Rails Method for password authenitcation
  - has_secure_password uses passwrd and password_confirmation to chekc and see if these two match
  - must add the passwrod_digest comlumn to users table
  - if they match on signup, it auto-generates the corresponding password_digest
  - has its own authenticate method

Sessions:
  - http is stateless and forgets everything each time it is refreshed
  - Yayyyy cookies
  -  Co okie gets passed around with your user_id so that the application remembers who you are each time a request is sent
  - All that really needs to be sent is the user_id
  - Cookies must be enabled on the browser
  - Sessions controller...no model!! Ahhhhh But use controller and routes in the same way.
  - Inside sessions controller :authenticate method makes sure that
  - Sessions route is new, create, destroy
  - new is log in page, create creates the session and writes info to cookie and destroy logs out and sets cookie info to nil.

  <%
  def create
    @user = User.find_by(email: params[:email])
    if user && user.authenticate(params[:password])
      #logs in/create session
      session[:user_id = user.id]
      redirect_to  #wherever
    else
      render 'new'
    end
  end

  def destroy
    sessions[:user_id] = nil
    redirect_to #whereever
  end
end

#Every cnrtoller inherits from application controller
  #This method should be private
private
def current_user
  @current_user = User.find(session[:user_id]) if session[:user_id]
              #OR
  @current_user ||= User.find(session[:user_id]) if session[:user_id]
end

def ensure_logged_in
  unless current_user
    flash[:alert] = "Please log in"
    redirect_to #Wherever
  end
end

#Validations go in the model where the attributes live

validates :title, :text, presence: true
validates :title, length: { max: 6 }

%>
If validations pass, it returns true, however if false, rails throws an array of errors. You can use these errors in the views with errors.messages.

Callbacks
---------
After a certain action, perform another action. Find all of the different types in rails guides.

After validations pass...
<%

after_validations :format_title
  def format_title
    self.title = tite.titlize
  end

  %>
...title is set to a titelized title before it is saved to the database

Nested Resources
----------------

  - Nesting resources for other classes/objects allows you to reason about something in the sense that it cant exist besides belonging to that object
  <%
  resources :articles do
    resources :comments
  end
%>

 - Another way of showing that comments belongs_to articles
 -Allows Article id (in this context) to be automatically included in the comments' article_id column.

 <%
 def create
  @article =Article.find(params[:article_id])
  @comment = @article.comments.build(comment_params)
  @comment.user =current_user
  #Add in if statement to redirect/save depending on situation.
 end
private

def comment_params
  params.require(:comment).permit(:body)
end

#Paths within nested resources need custom routes as rails needs to know the the parent and the child in order to know where it is going

#Ex:
%>

<%= form_for [@article, @comment] %> This looks for article_comment create path or whatever path...
